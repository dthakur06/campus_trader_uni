generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model Admin {
  id       String @id @default(auto()) @map("_id") @db.ObjectId
  name     String
  password String
  email    String @unique

  @@map("admin")
}

model Seller {
  id       String @id @default(auto()) @map("_id") @db.ObjectId
  name     String
  address  String
  phoneNo  String
  password String
  email    String @unique

  @@map("seller")
}

model User {
  id               String  @id @default(auto()) @map("_id") @db.ObjectId
  name             String
  password         String
  email            String  @unique
  address          String
  phoneNo          String
  type             String?
  approved         Boolean @default(true)
  role             Role    @default(CUSTOMER)
  hasResetPassword Boolean @default(false)

  orders   Order[]
  payments Payment[]
  products Product[]

  @@map("student")
}

model Product {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  name        String
  slug        String   @unique
  description String
  image       String
  quantity    Int
  price       Float
  commission  Float    @default(0)
  approved    Boolean  @default(false)
  category    String[]

  orders ProductOrder[]

  seller   User   @relation(fields: [sellerId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  sellerId String @db.ObjectId

  @@map("product")
}

model Order {
  id        String         @id @default(auto()) @map("_id") @db.ObjectId
  createdAt DateTime       @default(now())
  status    OrderStatus    @default(PENDING)
  products  ProductOrder[]
  type      OrderType      @default(PICKUP)
  payment   Payment?

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId String @db.ObjectId

  @@map("order")
}

model Payment {
  id            String        @id @default(auto()) @map("_id") @db.ObjectId
  createdAt     DateTime      @default(now())
  amount        Float
  paymentMethod PaymentMethod
  address       String
  deliveryFee   Float         @map("delivery_fee")

  order   Order  @relation(fields: [orderId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  orderId String @unique @db.ObjectId
  user    User   @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId  String @db.ObjectId
}

model ProductOrder {
  id       String @id @default(auto()) @map("_id") @db.ObjectId
  quantity Int
  amount   Float

  product   Product @relation(fields: [productId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  productId String  @db.ObjectId
  order     Order   @relation(fields: [orderId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  orderId   String  @db.ObjectId

  @@map("product_order")
}

enum OrderType {
  DELIVERY
  PICKUP
}

enum PaymentMethod {
  CREDIT_CARD
  DEBIT_CARD
}

enum OrderStatus {
  PENDING
  CONFIRMED
  IN_TRANSIT
  DELIVERED
  CANCELLED
}

enum Role {
  ADMIN
  SELLER
  CUSTOMER
}
